{
    "println":{
        "prefix":"fp",
        "body": ["fmt.Println($0)"]
    },
    "hello world": {
        "prefix": "hws",
        "body": ["package main","func main(){","fmt.Println(\"Hello World!\")", "}"]
    },
    "if condition": {
        "prefix": "ifs",
        "body": ["if $0 {","}"]
    },
    "if else condition": {
        "prefix": "ifels",
        "body": ["if $0 {","} else {","}"]
    },
    "switch":{
        "prefix":"sws",
        "body":["switch $0 {","case 1:","}"]
    },
    "for range":{
        "prefix": "frs",
        "body": ["for k,v:= range $0 {","}"]
    },
    "func":{
        "prefix": "fus",
        "body": ["func $0 ($1,error) {","return $1,err","}"]
    },
    "struct":{
        "prefix": "ss",
        "body": ["type $0 struct {","}"]
    },
    "go routine": {
        "prefix": "grs",
        "body": ["go func() {","fmt.Println($0)","}()","time.Sleep(time.Second)"]
    },
    "go channel": {
        "prefix": "grcs",
        "body": ["messages := make(chan string)","go func() { messages <- \"ping\" }()","msg := <-messages","fmt.Println(msg)"]
    },
    "go buffer channel": {
        "prefix": "grbcs",
        "body": ["messages := make(chan string, 2)","messages <- \"buffered\"","messages <- \"channel\"","fmt.Println(<-messages)","fmt.Println(<-messages)"]
    },
    "go ping pong": {
        "prefix": "pp",
        "body": ["pings := make(chan string, 1)","pongs := make(chan string, 1)","ping(pings, \"passed message\")","pong(pings, pongs)","fmt.Println(<-pongs)","}","func ping(pings chan<- string, msg string) {","pings <- msg","}","func pong(pings <-chan string, pongs chan<- string) {","msg := <-pings","pongs <- msg","}"]
    },
    "go job channel": {
        "prefix": "grj",
        "body": ["jobs := make(chan int, 5)","done := make(chan bool)",
        "go func() {",
        "for {",
        "j, more := <-jobs",
        "if more {",
        "fmt.Println(\"received job\", j)",
        "} else {",
        "fmt.Println(\"received all jobs\")",
        "done <- true",
        "return",
        "}",
        "}",
        "}()",
        "for j := 1; j <= 3; j++ {",
        "jobs <- j",
        "fmt.Println(\"sent job\", j)",
        "}",
        "close(jobs)",
        "fmt.Println(\"sent all jobs\")",
        "<-done"


        ]
    }
}